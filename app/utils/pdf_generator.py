import os
import datetime
from flask import url_for
from weasyprint import HTML, CSS
from weasyprint.text.fonts import FontConfiguration
from io import BytesIO
import uuid
import tempfile
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch


def generate_audit_pdf(
    machines, 
    machine_data, 
    audit_tasks, 
    users, 
    start_date, 
    end_date, 
    current_user, 
    get_calendar_weeks
):
    """
    Generate a PDF audit report based on the same data used in the HTML template.
    
    Args:
        machines: List of machine objects
        machine_data: Dictionary of machine audit data
        audit_tasks: Dictionary of audit task information
        users: Dictionary of user information
        start_date: Start date for the report
        end_date: End date for the report
        current_user: Current user generating the report
        get_calendar_weeks: Function to generate calendar weeks
        
    Returns:
        BytesIO object containing the PDF data
    """
    # Create a BytesIO buffer to receive the PDF data
    buffer = BytesIO()
    
    # Create the PDF document using ReportLab
    doc = SimpleDocTemplate(
        buffer,
        pagesize=landscape(letter),
        rightMargin=0.5*inch,
        leftMargin=0.5*inch,
        topMargin=0.75*inch,
        bottomMargin=0.75*inch,
    )
    
    # Initialize the document elements list
    elements = []
    
    # Define styles
    styles = getSampleStyleSheet()
    title_style = styles['Heading1']
    subtitle_style = styles['Heading2']
    normal_style = styles['Normal']
    
    # Create custom styles
    header_style = ParagraphStyle(
        'HeaderStyle',
        parent=styles['Heading1'],
        fontSize=18,
        textColor=colors.darkblue,
        spaceAfter=12
    )
    
    machine_title_style = ParagraphStyle(
        'MachineTitle',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.darkgreen,
        borderWidth=1,
        borderColor=colors.darkgreen,
        borderPadding=5,
        borderRadius=3,
        spaceAfter=10
    )
    
    certification_style = ParagraphStyle(
        'CertificationStyle',
        parent=styles['Italic'],
        fontSize=8,
        textColor=colors.darkgreen,
        alignment=1
    )
    
    # Add report title
    elements.append(Paragraph("AMRS Preventative Maintenance", header_style))
    elements.append(Paragraph("Machine Audit History Report", subtitle_style))
    elements.append(Spacer(1, 0.1*inch))
    
    # Add report metadata
    today = datetime.datetime.now()
    report_id = today.strftime('%Y%m%d%H%M%S')
    
    metadata = [
        ["Date Range:", f"{start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}"],
        ["Generated By:", current_user.full_name],
        ["Generated On:", today.strftime('%Y-%m-%d %H:%M')],
        ["Total Machines:", str(len(machines))],
        ["Total Records:", str(sum(len(machine_data.get(m.id, {})) for m in machines))],
        ["Report ID:", report_id]
    ]
    
    meta_table = Table(metadata, colWidths=[1.5*inch, 4*inch])
    meta_table.setStyle(TableStyle([
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTNAME', (1, 0), (1, -1), 'Helvetica'),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey)
    ]))
    
    elements.append(meta_table)
    elements.append(Spacer(1, 0.2*inch))
    
    # Process each machine
    for machine in machines:
        elements.append(Paragraph(f"{machine.name} (ID: {machine.machine_id})", machine_title_style))
        
        if machine.id in machine_data:
            # Create calendar display for this machine
            calendar_data = []
            
            # Add calendar headers
            calendar_data.append(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"])
            
            # Get weeks data using the provided function
            weeks = get_calendar_weeks(start_date, end_date)
            
            # Process each week
            for week in weeks:
                week_row = []
                for date in week:
                    if date:
                        # Format the cell content for this date
                        date_content = f"{date.day}"
                        
                        # Add audit entries if they exist for this date
                        date_str = date.strftime('%Y-%m-%d')
                        if machine.id in machine_data and date_str in machine_data[machine.id]:
                            for audit in machine_data[machine.id][date_str]:
                                task_name = audit_tasks[audit.audit_task_id].name
                                user_name = users[audit.user_id].full_name
                                time_str = audit.created_at.strftime('%H:%M')
                                date_content += f"\n{time_str} - {task_name}\n{user_name}"
                        
                        week_row.append(date_content)
                    else:
                        week_row.append("")
                
                calendar_data.append(week_row)
            
            # Create the calendar table
            cal_table = Table(calendar_data, colWidths=[1.4*inch, 1.4*inch, 1.4*inch, 1.4*inch, 1.4*inch, 1.4*inch, 1.4*inch])
            
            # Style the calendar
            table_style = [
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),  # Headers bold
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgreen),  # Header background
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.darkgreen),  # Header text color
                ('ALIGN', (0, 0), (-1, 0), 'CENTER'),  # Center align headers
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),  # Top align all cells
                ('BOX', (0, 0), (-1, -1), 1, colors.green),  # Box around table
                ('INNERGRID', (0, 0), (-1, -1), 0.5, colors.green),  # Inner grid lines
                ('FONTSIZE', (0, 1), (-1, -1), 8),  # Smaller font for calendar entries
            ]
            
            # Apply additional styling for specific dates if needed
            today_str = datetime.datetime.now().strftime('%Y-%m-%d')
            for i, week in enumerate(weeks):
                for j, date in enumerate(week):
                    if date and date.strftime('%Y-%m-%d') == today_str:
                        table_style.append(('BACKGROUND', (j, i+1), (j, i+1), colors.lightyellow))
            
            cal_table.setStyle(TableStyle(table_style))
            elements.append(cal_table)
            
        else:
            # No data for this machine
            elements.append(Paragraph("No audit records found for this machine in the selected date range.", normal_style))
        
        elements.append(Spacer(1, 0.2*inch))
        
        # Add certification text for this machine section
        certification_text = (
            f"This document certifies that all recorded maintenance tasks have been performed according to "
            f"AMRS Preventative Maintenance standards and protocols. Report ID: {report_id}"
        )
        elements.append(Paragraph(certification_text, certification_style))
        
        # Add a page break after each machine except the last one
        if machine != machines[-1]:
            elements.append(Spacer(1, 0.5*inch))
            elements.append(PageBreak())
    
    # Build the PDF document
    doc.build(elements)
    
    # Reset buffer position to the beginning
    buffer.seek(0)
    return buffer


# Function to generate HTML to PDF using WeasyPrint for more complex layouts
def generate_audit_pdf_from_html(html_content, base_url=None):
    """
    Generate a PDF from HTML content using WeasyPrint
    
    Args:
        html_content: HTML string content
        base_url: Base URL for resolving links
        
    Returns:
        BytesIO object containing the PDF data
    """
    font_config = FontConfiguration()
    html = HTML(string=html_content, base_url=base_url)
    
    # Create custom CSS for PDF rendering
    css = CSS(string='''
        @page {
            size: letter landscape;
            margin: 1cm;
            @bottom-center {
                content: "Page " counter(page) " of " counter(pages);
            }
        }
        body {
            font-family: sans-serif;
        }
    ''', font_config=font_config)
    
    # Generate PDF
    buffer = BytesIO()
    html.write_pdf(buffer, stylesheets=[css], font_config=font_config)
    buffer.seek(0)
    return buffer


# Import needed for page breaks
from reportlab.platypus import PageBreak