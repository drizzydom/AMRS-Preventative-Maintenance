name: Build and Test Windows Client

on:
  push:
    branches: [ main, development ]
    paths:
      - 'windows_client/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main, development ]
    paths:
      - 'windows_client/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create Release'
        type: boolean
        default: false
      version:
        description: 'Version tag (e.g. v1.0.0)'
        required: false
        default: ''

jobs:
  test:
    name: Run Tests
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install test dependencies
          pip install pytest pytest-cov pytest-qt flake8
          
          # Install application dependencies including analytics packages
          pip install -r windows_client/requirements.txt
          
          # Ensure matplotlib can run in headless mode for CI
          pip install pytest-mpl
      
      - name: Set matplotlib backend for CI
        run: |
          echo "backend: Agg" > matplotlibrc
      
      - name: Lint with flake8
        run: |
          flake8 windows_client/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # More lenient linting for analytics module which might trigger warnings
          flake8 windows_client/analytics/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Run tests
        run: |
          pytest windows_client/tests/ --cov=windows_client --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  build-windows:
    name: Build Windows Application
    runs-on: windows-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r windows_client/requirements.txt
          
          # Install specific packages for analytics
          pip install numpy matplotlib pandas
      
      - name: Download UPX
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/upx/upx/releases/download/v4.0.0/upx-4.0.0-win64.zip" -OutFile "upx.zip"
          Expand-Archive -Path "upx.zip" -DestinationPath "."
          Move-Item -Path "upx-4.0.0-win64/upx.exe" -Destination "windows_client/upx.exe"
          
      - name: Create analytics directory if needed
        run: |
          mkdir -p windows_client/analytics
          # Create __init__.py to make it a proper package
          if (-not (Test-Path -Path "windows_client/analytics/__init__.py")) {
            echo "# Analytics package" > windows_client/analytics/__init__.py
          }
          
      - name: Build application
        run: |
          cd windows_client
          python build.py --clean
      
      - name: Check if installer script exists
        id: check_installer
        run: |
          if (Test-Path -Path "windows_client/installer/setup.iss") {
            echo "exists=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "exists=false" >> $env:GITHUB_OUTPUT
          }
      
      - name: Install Inno Setup
        if: steps.check_installer.outputs.exists == 'true'
        run: |
          choco install innosetup -y
      
      - name: Build installer
        if: steps.check_installer.outputs.exists == 'true'
        run: |
          cd windows_client
          python build.py --installer
      
      - name: Create portable package
        run: |
          cd windows_client
          python build.py --portable
      
      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: MaintenanceTracker-Windows
          path: windows_client/dist/MaintenanceTracker
      
      - name: Upload installer artifact
        if: steps.check_installer.outputs.exists == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: MaintenanceTracker-Setup
          path: windows_client/dist/Output/MaintenanceTracker-Setup.exe
      
      - name: Upload portable artifact
        uses: actions/upload-artifact@v3
        with:
          name: MaintenanceTracker-Portable
          path: windows_client/dist/MaintenanceTrackerPortable.zip

  create-release:
    name: Create Release
    runs-on: windows-latest
    needs: build-windows
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Set version
        id: set_version
        run: |
          $version = "${{ github.event.inputs.version }}"
          if ([string]::IsNullOrEmpty($version)) {
            $version = "v$(Get-Date -Format 'yyyy.MM.dd')"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: AMRS Maintenance Tracker ${{ steps.set_version.outputs.version }}
          tag_name: ${{ steps.set_version.outputs.version }}
          draft: true
          files: |
            artifacts/MaintenanceTracker-Setup/MaintenanceTracker-Setup.exe
            artifacts/MaintenanceTracker-Portable/MaintenanceTrackerPortable.zip
