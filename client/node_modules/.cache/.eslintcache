[{"/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/index.js":"1","/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/App.js":"2","/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/Navbar.js":"3","/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/Login.js":"4","/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/AdminPanel.js":"5"},{"size":197,"mtime":1741981883140,"results":"6","hashOfConfig":"7"},{"size":8782,"mtime":1742070290114,"results":"8","hashOfConfig":"7"},{"size":1702,"mtime":1742070277806,"results":"9","hashOfConfig":"7"},{"size":3429,"mtime":1742070442783,"results":"10","hashOfConfig":"7"},{"size":33943,"mtime":1742070453965,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1rv4bht",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/index.js",[],[],"/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/App.js",[],"/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/Navbar.js",[],"/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/Login.js",[],"/Users/dominicmoriello/Documents/GitHub/Copilot Preventative Maintenance/client/src/AdminPanel.js",["24"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n\nfunction AdminPanel() {ns configuration\n  const [sites, setSites] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [machines, setMachines] = useState([]);\n  const [parts, setParts] = useState([]);\n  const [roles, setRoles] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [editingSite, setEditingSite] = useState(null);\n  const [editingUser, setEditingUser] = useState(null);\n  const [editingMachine, setEditingMachine] = useState(null);\n  const [editingPart, setEditingPart] = useState(null);\n  SITE: {\n  useEffect(() => {,\n    fetchCurrentUser();e',\n    fetchSites();:modify'\n    fetchUsers();\n    fetchMachines();\n    fetchParts();d',\n    fetchRoles();:delete',\n    fetchPermissions();y'\n  }, []);\n  MAINTENANCE: {\n  const fetchCurrentUser = async () => {\n    try {E: 'maintenance:delete',\n      // For demo, use the localStorage data instead of an API call\n      const isAdmin = localStorage.getItem('isAdmin') === 'true';\n      const username = localStorage.getItem('username');\n      const userId = localStorage.getItem('userId');\n      on AdminPanel() {\n      // Mock user data for testinge([]);\n      setCurrentUser({rs] = useState([]);\n        id: userId,setMachines] = useState([]);\n        username: username, useState([]);\n        isAdmin: isAdmin, = useState([]);\n        permissions: isAdmin ? sions] = useState([]);\n          Object.values(permissions).flatMap(category => Object.values(category)) : []\n      });editingSite, setEditingSite] = useState(null);\n    } catch (error) { setEditingUser] = useState(null);\n      console.error('Error fetching current user:', error););\n      // Avoid infinite redirect loop by not redirecting here\n    }\n  };eEffect(() => {\n    fetchCurrentUser();\n  const fetchSites = async () => {\n    const response = await axios.get('http://localhost:5001/sites');\n    setSites(response.data);\n  };fetchParts();\n    fetchRoles();\n  const fetchUsers = async () => {\n    const response = await axios.get('http://localhost:5001/users');\n    setUsers(response.data);\n  };nst fetchCurrentUser = async () => {\n    try {\n  const fetchMachines = async () => {ge data instead of an API call\n    const response = await axios.get('http://localhost:5001/machines');\n    setMachines(response.data);rage.getItem('username');\n  };  const userId = localStorage.getItem('userId');\n      \n  const fetchParts = async () => {missions\n    const response = await axios.get('http://localhost:5001/parts');\n    setParts(response.data);sions).flatMap(category => Object.values(category)) : \n  };    []; // For non-admin users, we'd fetch their specific permissions from the server\n      \n  const fetchRoles = async () => {\n    const response = await axios.get('http://localhost:5001/roles');\n    setRoles(response.data);\n  };    isAdmin: isAdmin,\n        permissions: userPermissions\n  const fetchPermissions = async () => {\n    const response = await axios.get('http://localhost:5001/permissions');\n    setPermissions(response.data);g current user:', error);\n  };}\n  };\n  const handleAddSite = async (e) => {\n    e.preventDefault();ync () => {\n    try { response = await axios.get('http://localhost:5001/sites');\n      const name = e.target.elements.name.value;\n      await axios.post('http://localhost:5001/sites', \n        { name }, \n        { headers: { 'User-ID': currentUser.id } }\n      );t response = await axios.get('http://localhost:5001/users');\n      fetchSites();se.data);\n      e.target.reset();\n    } catch (error) {\n      console.error('Error adding site:', error);\n      if (error.response && error.response.status === 403) {machines');\n        alert('You do not have permission to add sites');\n      }\n    }\n  };nst fetchParts = async () => {\n    const response = await axios.get('http://localhost:5001/parts');\n  const handleAddUser = async (e) => {\n    e.preventDefault();\n    try {\n      const username = e.target.elements.username.value;\n      const password = e.target.elements.password.value;001/roles');\n      const role_id = e.target.elements.role_id.value;\n      await axios.post('http://localhost:5001/users', \n        { username, password, role_id }, \n        { headers: { 'User-ID': currentUser.id } }\n      );t response = await axios.get('http://localhost:5001/permissions');\n      fetchUsers();response.data);\n      e.target.reset();\n    } catch (error) {\n      console.error('Error adding user:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to add users');\n      }onst name = e.target.elements.name.value;\n    } await axios.post('http://localhost:5001/sites', \n  };    { name }, \n        { headers: { 'User-ID': currentUser.id } }\n  const handleAddMachine = async (e) => {\n    e.preventDefault();\n    try {arget.reset();\n      const name = e.target.elements.name.value;\n      const site_id = e.target.elements.site_id.value;\n      await axios.post('http://localhost:5001/machines', ) {\n        { name, site_id }, ave permission to add sites');\n        { headers: { 'User-ID': currentUser.id } }\n      );\n      fetchMachines();\n      e.target.reset();\n    } catch (error) { = async (e) => {\n      console.error('Error adding machine:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to add machines');\n      }onst password = e.target.elements.password.value;\n    } const role_id = e.target.elements.role_id.value;\n  };  await axios.post('http://localhost:5001/users', \n        { username, password, role_id }, \n  const handleAddPart = async (e) => {tUser.id } }\n    e.preventDefault();\n    try {chUsers();\n      const name = e.target.elements.name.value;\n      const machine_id = e.target.elements.machine_id.value;\n      await axios.post('http://localhost:5001/parts', \n        { name, machine_id }, ror.response.status === 403) {\n        { headers: { 'User-ID': currentUser.id } }sers');\n      );\n      fetchParts();\n      e.target.reset();\n    } catch (error) {\n      console.error('Error adding part:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to add parts');\n      }onst name = e.target.elements.name.value;\n    } const site_id = e.target.elements.site_id.value;\n  };  await axios.post('http://localhost:5001/machines', \n        { name, site_id }, \n  const handleAddRole = async (e) => {tUser.id } }\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    await axios.post('http://localhost:5001/roles', { name }, { headers: { 'User-ID': currentUser.id } });\n    fetchRoles();r) {\n  };  console.error('Error adding machine:', error);\n      if (error.response && error.response.status === 403) {\n  const handleAddPermission = async (e) => { add machines');\n    e.preventDefault();\n    const name = e.target.elements.name.value;\n    const role_id = e.target.elements.role_id.value;\n    await axios.post('http://localhost:5001/permissions', { name, role_id }, { headers: { 'User-ID': currentUser.id } });\n    fetchPermissions(); async (e) => {\n  };e.preventDefault();\n    try {\n  const handleDeleteSite = async (id) => {value;\n    try {st machine_id = e.target.elements.machine_id.value;\n      await axios.delete(`http://localhost:5001/sites/${id}`, \n        { headers: { 'User-ID': currentUser.id } }\n      );{ headers: { 'User-ID': currentUser.id } }\n      fetchSites();\n    } catch (error) {\n      console.error('Error deleting site:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to delete sites');\n      }f (error.response && error.response.status === 403) {\n    }   alert('You do not have permission to add parts');\n  };  }\n    }\n  const handleEditSite = (site) => {\n    setEditingSite(site);\n  };nst handleAddRole = async (e) => {\n    e.preventDefault();\n  const handleUpdateSite = async (e) => {alue;\n    e.preventDefault();ttp://localhost:5001/roles', { name }, { headers: { 'User-ID': currentUser.id } });\n    try {Roles();\n      const name = e.target.elements.name.value;\n      await axios.put(`http://localhost:5001/sites/${editingSite.id}`, \n        { name }, ermission = async (e) => {\n        { headers: { 'User-ID': currentUser.id } }\n      );t name = e.target.elements.name.value;\n      setEditingSite(null);t.elements.role_id.value;\n      fetchSites();t('http://localhost:5001/permissions', { name, role_id }, { headers: { 'User-ID': currentUser.id } });\n    } catch (error) {);\n      console.error('Error updating site:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to modify sites');\n      } {\n    } await axios.delete(`http://localhost:5001/sites/${id}`, \n  };    { headers: { 'User-ID': currentUser.id } }\n      );\n  const handleDeleteUser = async (id) => {\n    try {ch (error) {\n      await axios.delete(`http://localhost:5001/users/${id}`, \n        { headers: { 'User-ID': currentUser.id } }=== 403) {\n      );alert('You do not have permission to delete sites');\n      fetchUsers();\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to delete users');\n      }EditingSite(site);\n    }\n  };\n  const handleUpdateSite = async (e) => {\n  const handleEditUser = (user) => {\n    setEditingUser(user);\n  };  const name = e.target.elements.name.value;\n      await axios.put(`http://localhost:5001/sites/${editingSite.id}`, \n  const handleUpdateUser = async (e) => {\n    e.preventDefault();ser-ID': currentUser.id } }\n    try {\n      const username = e.target.elements.username.value;\n      const role_id = e.target.elements.role_id.value;\n      const password = e.target.elements.password.value;\n      console.error('Error updating site:', error);\n      const userData = { && error.response.status === 403) {\n        username,  do not have permission to modify sites');\n        role_id\n      };\n      \n      if (password) {\n        userData.password = password; => {\n      } {\n      await axios.delete(`http://localhost:5001/users/${id}`, \n      await axios.put(`http://localhost:5001/users/${editingUser.id}`, \n        userData, \n        { headers: { 'User-ID': currentUser.id } }\n      );tch (error) {\n      setEditingUser(null);deleting user:', error);\n      fetchUsers();ponse && error.response.status === 403) {\n    } catch (error) { not have permission to delete users');\n      console.error('Error updating user:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to modify users');\n      }\n    }st handleEditUser = (user) => {\n  };setEditingUser(user);\n  };\n  const handleDeleteMachine = async (id) => {\n    try {andleUpdateUser = async (e) => {\n      await axios.delete(`http://localhost:5001/machines/${id}`, \n        { headers: { 'User-ID': currentUser.id } }\n      );nst username = e.target.elements.username.value;\n      fetchMachines();e.target.elements.role_id.value;\n    } catch (error) {= e.target.elements.password.value;\n      console.error('Error deleting machine:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to delete machines');\n      } role_id\n    } };\n  };  \n      if (password) {\n  const handleEditMachine = (machine) => {\n    setEditingMachine(machine);\n  };  \n      await axios.put(`http://localhost:5001/users/${editingUser.id}`, \n  const handleUpdateMachine = async (e) => {\n    e.preventDefault();ser-ID': currentUser.id } }\n    try {\n      const name = e.target.elements.name.value;\n      const site_id = e.target.elements.site_id.value;\n      await axios.put(`http://localhost:5001/machines/${editingMachine.id}`, \n        { name, site_id }, updating user:', error);\n        { headers: { 'User-ID': currentUser.id } }=== 403) {\n      );alert('You do not have permission to modify users');\n      setEditingMachine(null);\n      fetchMachines();\n    } catch (error) {\n      console.error('Error updating machine:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to modify machines');\n      }wait axios.delete(`http://localhost:5001/machines/${id}`, \n    }   { headers: { 'User-ID': currentUser.id } }\n  };  );\n      fetchMachines();\n  const handleDeletePart = async (id) => {\n    try {sole.error('Error deleting machine:', error);\n      await axios.delete(`http://localhost:5001/parts/${id}`, \n        { headers: { 'User-ID': currentUser.id } }e machines');\n      );\n      fetchParts();\n    } catch (error) {\n      console.error('Error deleting part:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to delete parts');\n      }\n    }\n  };nst handleUpdateMachine = async (e) => {\n    e.preventDefault();\n  const handleEditPart = (part) => {\n    setEditingPart(part);et.elements.name.value;\n  };  const site_id = e.target.elements.site_id.value;\n      await axios.put(`http://localhost:5001/machines/${editingMachine.id}`, \n  const handleUpdatePart = async (e) => {\n    e.preventDefault();ser-ID': currentUser.id } }\n    try {\n      const name = e.target.elements.name.value;\n      const machine_id = e.target.elements.machine_id.value;\n      await axios.put(`http://localhost:5001/parts/${editingPart.id}`, \n        { name, machine_id }, ating machine:', error);\n        { headers: { 'User-ID': currentUser.id } }=== 403) {\n      );alert('You do not have permission to modify machines');\n      setEditingPart(null);\n      fetchParts();\n    } catch (error) {\n      console.error('Error updating part:', error);\n      if (error.response && error.response.status === 403) {\n        alert('You do not have permission to modify parts');\n      }wait axios.delete(`http://localhost:5001/parts/${id}`, \n    }   { headers: { 'User-ID': currentUser.id } }\n  };  );\n      fetchParts();\n  return (h (error) {\n    <div className=\"container\">ting part:', error);\n      <h1 className=\"text-center\">Admin Panel</h1>=== 403) {\n      {!currentUser && <p className=\"alert alert-warning\">Loading user data...</p>}\n      {currentUser && !currentUser.isAdmin && (\n        <p className=\"alert alert-danger\">\n          You do not have administrator permissions to access this page.\n        </p>\n      )}handleEditPart = (part) => {\n      tEditingPart(part);\n      {currentUser && currentUser.isAdmin && (\n        <>\n          <div className=\"row\">c (e) => {\n            <div className=\"col-md-6\">\n              <h2>Sites</h2>\n              {currentUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.SITE.ADD)) && (\n                <form onSubmit={handleAddSite}>ine_id.value;\n                  <input type=\"text\" name=\"name\" placeholder=\"Site Name\" className=\"form-control\" />\n                  <button type=\"submit\" className=\"btn btn-primary\">Add Site</button>\n                </form>ser-ID': currentUser.id } }\n              )}\n              {editingSite && (\n                <form onSubmit={handleUpdateSite}>\n                  <input \n                    type=\"text\" ing part:', error);\n                    name=\"name\" r.response.status === 403) {\n                    placeholder=\"Site Name\"  modify parts');\n                    className=\"form-control\" \n                    defaultValue={editingSite.name}\n                  />\n                  <div>\n                    <button type=\"submit\" className=\"btn btn-success\">Update</button>\n                    <button r\">\n                      type=\"button\" min Panel</h1>\n                      className=\"btn btn-secondary\" ning\">Loading user data...</p>}\n                      onClick={() => setEditingSite(null)}\n                    >\"alert alert-danger\">\n                      Cancelministrator permissions to access this page.\n                    </button>\n                  </div>\n                </form>\n              )}er && currentUser.isAdmin && (\n              <ul className=\"list-group\">\n                {sites.map(site => (\n                  <li key={site.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <Link to={`/sites/${site.id}`}>{site.name}</Link>\n                    <div>r && (currentUser.isAdmin || currentUser.permissions.includes(permissions.SITE.ADD)) && (\n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.SITE.MODIFY)) && (\n                        <button ext\" name=\"name\" placeholder=\"Site Name\" className=\"form-control\" />\n                          className=\"btn btn-sm btn-primary mr-2\" \">Add Site</button>\n                          onClick={() => handleEditSite(site)}\n                        >\n                          Edit(\n                        </button>andleUpdateSite}>\n                      )} \n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.SITE.DELETE)) && (\n                        <button \n                          className=\"btn btn-sm btn-danger\" \n                          onClick={() => handleDeleteSite(site.id)}\n                        >ltValue={editingSite.name}\n                          Delete\n                        </button>\n                      )}ton type=\"submit\" className=\"btn btn-success\">Update</button>\n                    </div>n \n                  </li>ype=\"button\" \n                ))}   className=\"btn btn-secondary\" \n              </ul>   onClick={() => setEditingSite(null)}\n            </div>  >\n            <div className=\"col-md-6\">\n              <h2>Users</h2>>\n              {currentUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.USER.ADD)) && (\n                <form onSubmit={handleAddUser}>\n                  <input type=\"text\" name=\"username\" placeholder=\"Username\" className=\"form-control\" />\n                  <input type=\"password\" name=\"password\" placeholder=\"Password\" className=\"form-control\" />\n                  <select name=\"role_id\" className=\"form-control\">\n                    {roles.map(role => (sName=\"list-group-item d-flex justify-content-between align-items-center\">\n                      <option key={role.id} value={role.id}>{role.name}</option>\n                    ))}v>\n                  </select>entUser && (currentUser.isAdmin || currentUser.permissions.includes('site:modify')) && (\n                  <button type=\"submit\" className=\"btn btn-primary\">Add User</button>\n                </form>   className=\"btn btn-sm btn-primary mr-2\" \n              )}          onClick={() => handleEditSite(site)}\n              {editingUser && (\n                <form onSubmit={handleUpdateUser}>\n                  <input /button>\n                    type=\"text\" \n                    name=\"username\" & (currentUser.isAdmin || currentUser.permissions.includes('site:delete')) && (\n                    placeholder=\"Username\" \n                    className=\"form-control\" sm btn-danger\" \n                    defaultValue={editingUser.username}te(site.id)}\n                  />    >\n                  <input  Delete\n                    type=\"password\" \n                    name=\"password\" \n                    placeholder=\"Password\" \n                    className=\"form-control\" \n                  />\n                  <select name=\"role_id\" className=\"form-control\" defaultValue={editingUser.role_id}>\n                    {roles.map(role => (\n                      <option key={role.id} value={role.id}>{role.name}</option>\n                    ))}</h2>\n                  </select>&& (currentUser.isAdmin || currentUser.permissions.includes(permissions.USER.ADD)) && (\n                  <div>nSubmit={handleAddUser}>\n                    <button type=\"submit\" className=\"btn btn-success\">Update</button>=\"form-control\" />\n                    <button e=\"password\" name=\"password\" placeholder=\"Password\" className=\"form-control\" />\n                      type=\"button\" _id\" className=\"form-control\">\n                      className=\"btn btn-secondary\" \n                      onClick={() => setEditingUser(null)}}>{role.name}</option>\n                    >)}\n                      Cancel\n                    </button>e=\"submit\" className=\"btn btn-primary\">Add User</button>\n                  </div>\n                </form>\n              )}ditingUser && (\n              <ul className=\"list-group\">ateUser}>\n                {users.map(user => (\n                  <li key={user.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <Link to={`/users/${user.id}`}>{user.username}</Link>\n                    <div>holder=\"Username\" \n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes('user:modify')) && (\n                        <button ={editingUser.username}\n                          className=\"btn btn-sm btn-primary mr-2\" \n                          onClick={() => handleEditUser(user)}\n                        >\"password\" \n                          Editword\" \n                        </button>Password\" \n                      )}sName=\"form-control\" \n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes('user:delete')) && (\n                        <button role_id\" className=\"form-control\" defaultValue={editingUser.role_id}>\n                          className=\"btn btn-sm btn-danger\" \n                          onClick={() => handleDeleteUser(user.id)}ame}</option>\n                        >\n                          Delete\n                        </button>\n                      )}ton type=\"submit\" className=\"btn btn-success\">Update</button>\n                    </div>n \n                  </li>ype=\"button\" \n                ))}   className=\"btn btn-secondary\" \n              </ul>   onClick={() => setEditingUser(null)}\n            </div>  >\n          </div>      Cancel\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h2>Machines</h2>\n              {currentUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.MACHINE.ADD)) && (\n                <form onSubmit={handleAddMachine}>\n                  <input type=\"text\" name=\"name\" placeholder=\"Machine Name\" className=\"form-control\" />\n                  <select name=\"site_id\" className=\"form-control\">lex justify-content-between align-items-center\">\n                    {sites.map(site => (user.id}`}>{user.username}</Link>\n                      <option key={site.id} value={site.id}>{site.name}</option>\n                    ))}currentUser && (currentUser.isAdmin || currentUser.permissions.includes('user:modify')) && (\n                  </select>tton \n                  <button type=\"submit\" className=\"btn btn-primary\">Add Machine</button>\n                </form>   onClick={() => handleEditUser(user)}\n              )}        >\n              {editingMachine && (\n                <form onSubmit={handleUpdateMachine}>\n                  <input \n                    type=\"text\" er && (currentUser.isAdmin || currentUser.permissions.includes('user:delete')) && (\n                    name=\"name\" \n                    placeholder=\"Machine Name\"  btn-danger\" \n                    className=\"form-control\" leDeleteUser(user.id)}\n                    defaultValue={editingMachine.name}\n                  />      Delete\n                  <select name=\"site_id\" className=\"form-control\" defaultValue={editingMachine.site_id}>\n                    {sites.map(site => (\n                      <option key={site.id} value={site.id}>{site.name}</option>\n                    ))}\n                  </select>\n                  <div>\n                    <button type=\"submit\" className=\"btn btn-success\">Update</button>\n                    <button \n                      type=\"button\" \n                      className=\"btn btn-secondary\" \n                      onClick={() => setEditingMachine(null)}\n                    >tUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.MACHINE.ADD)) && (\n                      Cancelit={handleAddMachine}>\n                    </button>=\"text\" name=\"name\" placeholder=\"Machine Name\" className=\"form-control\" />\n                  </div>t name=\"site_id\" className=\"form-control\">\n                </form>tes.map(site => (\n              )}      <option key={site.id} value={site.id}>{site.name}</option>\n              <ul className=\"list-group\">\n                {machines.map(machine => (\n                  <li key={machine.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <Link to={`/machines/${machine.id}`}>{machine.name}</Link>\n                    <div>\n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes('machine:modify')) && (\n                        <button handleUpdateMachine}>\n                          className=\"btn btn-sm btn-primary mr-2\" \n                          onClick={() => handleEditMachine(machine)}\n                        >\"name\" \n                          Editr=\"Machine Name\" \n                        </button>rm-control\" \n                      )}ultValue={editingMachine.name}\n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes('machine:delete')) && (\n                        <button site_id\" className=\"form-control\" defaultValue={editingMachine.site_id}>\n                          className=\"btn btn-sm btn-danger\" \n                          onClick={() => handleDeleteMachine(machine.id)}option>\n                        >\n                          Delete\n                        </button>\n                      )}ton type=\"submit\" className=\"btn btn-success\">Update</button>\n                    </div>n \n                  </li>ype=\"button\" \n                ))}   className=\"btn btn-secondary\" \n              </ul>   onClick={() => setEditingMachine(null)}\n            </div>  >\n            <div className=\"col-md-6\">\n              <h2>Parts</h2>>\n              {currentUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.PART.ADD)) && (\n                <form onSubmit={handleAddPart}>\n                  <input type=\"text\" name=\"name\" placeholder=\"Part Name\" className=\"form-control\" />\n                  <select name=\"machine_id\" className=\"form-control\">\n                    {machines.map(machine => (\n                      <option key={machine.id} value={machine.id}>{machine.name}</option>between align-items-center\">\n                    ))}nk to={`/machines/${machine.id}`}>{machine.name}</Link>\n                  </select>\n                  <button type=\"submit\" className=\"btn btn-primary\">Add Part</button>.includes('machine:modify')) && (\n                </form> <button \n              )}          className=\"btn btn-sm btn-primary mr-2\" \n              {editingPart && (ck={() => handleEditMachine(machine)}\n                <form onSubmit={handleUpdatePart}>\n                  <input  Edit\n                    type=\"text\" >\n                    name=\"name\" \n                    placeholder=\"Part Name\" ntUser.isAdmin || currentUser.permissions.includes('machine:delete')) && (\n                    className=\"form-control\" \n                    defaultValue={editingPart.name}-danger\" \n                  />      onClick={() => handleDeleteMachine(machine.id)}\n                  <select name=\"machine_id\" className=\"form-control\" defaultValue={editingPart.machine_id}>\n                    {machines.map(machine => (\n                      <option key={machine.id} value={machine.id}>{machine.name}</option>\n                    ))}}\n                  </select>\n                  <div>\n                    <button type=\"submit\" className=\"btn btn-success\">Update</button>\n                    <button \n                      type=\"button\" \n                      className=\"btn btn-secondary\" \n                      onClick={() => setEditingPart(null)}\n                    >tUser && (currentUser.isAdmin || currentUser.permissions.includes(permissions.PART.ADD)) && (\n                      Cancelit={handleAddPart}>\n                    </button>=\"text\" name=\"name\" placeholder=\"Part Name\" className=\"form-control\" />\n                  </div>t name=\"machine_id\" className=\"form-control\">\n                </form>chines.map(machine => (\n              )}      <option key={machine.id} value={machine.id}>{machine.name}</option>\n              <ul className=\"list-group\">\n                {parts.map(part => (\n                  <li key={part.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <Link to={`/parts/${part.id}`}>{part.name}</Link>\n                    <div>\n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes('part:modify')) && (\n                        <button handleUpdatePart}>\n                          className=\"btn btn-sm btn-primary mr-2\" \n                          onClick={() => handleEditPart(part)}\n                        >\"name\" \n                          Editr=\"Part Name\" \n                        </button>rm-control\" \n                      )}ultValue={editingPart.name}\n                      {currentUser && (currentUser.isAdmin || currentUser.permissions.includes('part:delete')) && (\n                        <button machine_id\" className=\"form-control\" defaultValue={editingPart.machine_id}>\n                          className=\"btn btn-sm btn-danger\" \n                          onClick={() => handleDeletePart(part.id)}machine.name}</option>\n                        >\n                          Delete\n                        </button>\n                      )}ton type=\"submit\" className=\"btn btn-success\">Update</button>\n                    </div>n \n                  </li>ype=\"button\" \n                ))}   className=\"btn btn-secondary\" \n              </ul>   onClick={() => setEditingPart(null)}\n            </div>  >\n          </div>      Cancel\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h2>Roles</h2>\n              {currentUser && currentUser.permissions.includes('create_role') && (\n                <form onSubmit={handleAddRole}>\n                  <input type=\"text\" name=\"name\" placeholder=\"Role Name\" className=\"form-control\" />\n                  <button type=\"submit\" className=\"btn btn-primary\">Add Role</button>-between align-items-center\">\n                </form>nk to={`/parts/${part.id}`}>{part.name}</Link>\n              )}    <div>\n              <ul className=\"list-group\">rrentUser.isAdmin || currentUser.permissions.includes('part:modify')) && (\n                {roles.map(role => (\n                  <li key={role.id} className=\"list-group-item\">\" \n                    <Link to={`/roles/${role.id}`}>{role.name}</Link>\n                  </li> >\n                ))}       Edit\n              </ul>     </button>\n            </div>    )}\n            <div className=\"col-md-6\">(currentUser.isAdmin || currentUser.permissions.includes('part:delete')) && (\n              <h2>Permissions</h2>\n              {currentUser && currentUser.permissions.includes('create_permission') && (\n                <form onSubmit={handleAddPermission}>Part(part.id)}\n                  <input type=\"text\" name=\"name\" placeholder=\"Permission Name\" className=\"form-control\" />\n                  <select name=\"role_id\" className=\"form-control\">\n                    {roles.map(role => (\n                      <option key={role.id} value={role.id}>{role.name}</option>\n                    ))}iv>\n                  </select>\n                  <button type=\"submit\" className=\"btn btn-primary\">Add Permission</button>\n                </form>\n              )}v>\n              <ul className=\"list-group\">\n                {permissions.map(permission => (\n                  <li key={permission.id} className=\"list-group-item\">\n                    <Link to={`/permissions/${permission.id}`}>{permission.name}</Link>\n                  </li>ser && currentUser.permissions.includes('create_role') && (\n                ))}rm onSubmit={handleAddRole}>\n              </ul>input type=\"text\" name=\"name\" placeholder=\"Role Name\" className=\"form-control\" />\n            </div><button type=\"submit\" className=\"btn btn-primary\">Add Role</button>\n          </div></form>\n        </>   )}\n      )}      <ul className=\"list-group\">\n    </div>      {roles.map(role => (\n  );              <li key={role.id} className=\"list-group-item\">\n}                   <Link to={`/roles/${role.id}`}>{role.name}</Link>\n                  </li>\nexport default AdminPanel;\n              </ul>\n            </div>\n            <div className=\"col-md-6\">\n              <h2>Permissions</h2>\n              {currentUser && currentUser.permissions.includes('create_permission') && (\n                <form onSubmit={handleAddPermission}>\n                  <input type=\"text\" name=\"name\" placeholder=\"Permission Name\" className=\"form-control\" />\n                  <select name=\"role_id\" className=\"form-control\">\n                    {roles.map(role => (\n                      <option key={role.id} value={role.id}>{role.name}</option>\n                    ))}\n                  </select>\n                  <button type=\"submit\" className=\"btn btn-primary\">Add Permission</button>\n                </form>\n              )}\n              <ul className=\"list-group\">\n                {permissions.map(permission => (\n                  <li key={permission.id} className=\"list-group-item\">\n                    <Link to={`/permissions/${permission.id}`}>{permission.name}</Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AdminPanel;\n",{"ruleId":null,"fatal":true,"severity":2,"message":"25","line":6,"column":26},"Parsing error: Missing semicolon.\n\n\u001b[0m \u001b[90m 4 |\u001b[39m \u001b[36mimport\u001b[39m \u001b[32m'./App.css'\u001b[39m\u001b[33m;\u001b[39m\n \u001b[90m 5 |\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 6 |\u001b[39m \u001b[36mfunction\u001b[39m \u001b[33mAdminPanel\u001b[39m() {ns configuration\n \u001b[90m   |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 7 |\u001b[39m   \u001b[36mconst\u001b[39m [sites\u001b[33m,\u001b[39m setSites] \u001b[33m=\u001b[39m useState([])\u001b[33m;\u001b[39m\n \u001b[90m 8 |\u001b[39m   \u001b[36mconst\u001b[39m [users\u001b[33m,\u001b[39m setUsers] \u001b[33m=\u001b[39m useState([])\u001b[33m;\u001b[39m\n \u001b[90m 9 |\u001b[39m   \u001b[36mconst\u001b[39m [machines\u001b[33m,\u001b[39m setMachines] \u001b[33m=\u001b[39m useState([])\u001b[33m;\u001b[39m\u001b[0m"]